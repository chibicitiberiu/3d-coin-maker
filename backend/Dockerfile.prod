# Multi-stage build for production optimization

# Stage 1: Build HMM binary
FROM python:3.11-slim AS hmm-builder

# Install build dependencies for HMM
RUN apt-get update && apt-get install -y \
    git \
    build-essential \
    cmake \
    make \
    pkg-config \
    libglm-dev \
    && rm -rf /var/lib/apt/lists/*

# Build HMM from source
RUN cd /tmp && \
    git clone https://github.com/fogleman/hmm.git && \
    cd hmm && \
    make && \
    cp hmm /usr/local/bin/hmm

# Stage 2: Production runtime
FROM python:3.11-slim

# Install build dependencies temporarily for Python packages
RUN apt-get update && apt-get install -y \
    curl \
    dumb-init \
    build-essential \
    libpython3-dev \
    python3-distutils \
    && rm -rf /var/lib/apt/lists/*

# Copy HMM binary from hmm-builder stage
COPY --from=hmm-builder /usr/local/bin/hmm /usr/local/bin/hmm

# Install Poetry temporarily
RUN pip install poetry

# Set working directory
WORKDIR /app

# Copy poetry files and install dependencies
COPY pyproject.toml poetry.lock ./
RUN poetry config virtualenvs.create false \
    && poetry install --only=main

# Remove build dependencies to reduce image size
RUN apt-get remove -y build-essential libpython3-dev python3-distutils \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && pip uninstall -y poetry

# Install production dependencies
RUN pip install --no-cache-dir \
    gunicorn==21.2.0 \
    redis==5.0.1 \
    celery==5.3.4

# Set working directory
WORKDIR /app

# Copy application code
COPY . .

# Create necessary directories with proper permissions
RUN mkdir -p /app/temp /app/data /app/static /app/logs \
    && chmod 755 /app/temp /app/data /app/static /app/logs

# Collect static files
ENV DJANGO_SETTINGS_MODULE=coin_maker.settings
RUN python manage.py collectstatic --noinput --clear


# Create non-root user for security
RUN groupadd -r app && useradd -r -g app -d /app -s /bin/bash app \
    && chown -R app:app /app

# Switch to non-root user
USER app

# Expose port
EXPOSE 8000

# Health check with improved configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/api/health/ || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Use gunicorn for production with optimized settings
CMD ["gunicorn", \
    "--bind", "0.0.0.0:8000", \
    "--workers", "3", \
    "--worker-class", "sync", \
    "--worker-connections", "1000", \
    "--max-requests", "1000", \
    "--max-requests-jitter", "100", \
    "--timeout", "120", \
    "--keep-alive", "5", \
    "--preload", \
    "--access-logfile", "/app/logs/access.log", \
    "--error-logfile", "/app/logs/error.log", \
    "--capture-output", \
    "coin_maker.wsgi:application"]